1、file --> new  --> project --> spring initializr
2、在父工程的pom.xml里面把org.springframework.boot的版本改为2.2.1
3、在父工程的pom.xml里面<packaging>pom</packaging>
3、在父工程的pom.xml里面添加properties的所有依赖的版本
4、删除父工程的src
5、添加子工程 file --> new --> module --> maven --> service
    5.1 配置service模块的pom.xml
        5.1.1 在service模块的pom.xml里面<packaging>pom</packaging>
        5.1.2 引入依赖：引入依赖，不需要引版本
    5.2 添加子工程 file --> new --> module --> maven --> service-edu
        5.2.1 配置application.properties
6、代码生成器，创建CodeGenerator类，代码生成器。
7、编写EduApplication，用于启动类。
8、编写EduConfig配置类 添加@MapperScan("com.lvgr.eduservice.mapper"),mapper没有实现类，mapper程序扫描不上，所以添加MapperScan注解进行扫描。
9、测试访问http://localhost:8001/eduservice/edu-teacher/findAllTeacher（只能用于get请求）
10、整合swagger:创建SawageerConfig类
    10.1    @ApiOperation("查询讲师列表") swagger会出现中文提示
11、在业务程序模块要引用swagger，需要业务模块引入依赖
    11、1    <dependency>
                <groupId>com.lvgr</groupId>
                <artifactId>service_edubase</artifactId>
                <version>0.0.1-SNAPSHOT</version>
            </dependency>

12、测试其他使用http://localhost:8001/swagger-ui.html。点击Try it out.
13、添加子工程 file --> new --> module --> maven --> common_utils用于编写系统公共工具
14、在service的pom引入common_utils便于service模块调用
15、整合日志：
    15.1在service-edu--resources下面创建logback-spring.xml
    15.2注释掉application.properties下的mybatis日志
    15.3<property name="log.path" value="F:/xiangmu/project/edu/log" />日志输出的地址
    15.4在ClobalExceptionHandle的类里面增加@Slf4j注解就会把异常信息输出到日志文件log-error里面。
16、整合异常
    16.1 开发ClobalExceptionHandle全局异步异常处理
    16.2 开发异常工具类ExceptionUtil

17、整合阿里云oss
    17.1 开通oss：https://oss.console.aliyun.com/bucket/oss-cn-chengdu/edu-lvgr/overview，创建bucket,生成密钥
    17.2 创建service-oss模块用于整合oss
    17.3 创建oss的application.properties文件配置oss信息
    17.4 引入相关依赖
    17.5 创建常量读取配置内容ConstantPropertiesUtils
    17.6 创建upload方法实现上传

18. nginx：反向代理服务器
    18.1：请求转发（根据请求转发到具体的服务器中）、负载均衡（把请求平均分担到不同的服务器上）、动静分离
    18.2：请求转发配置方法(用于本项目8001和8002的请求转发)：在nginx的conf的nginx.conf修改。
        18.2.1 server {
                      listen       81;
                      }
        18.2.2 #9001:监听的端口，localhost:主机，ocation ~ /eduservice匹配路径
               	server {
                    listen       9009;
                    server_name  localhost;

                    location ~ /eduservice/ {
                        proxy http://localhost:8001;
                    }
                    location ~ /eduoss/ {
                        proxy http://localhost:8002;
                    }

                }
        18.2.3 修改前端请求地址为：9009.
        18.2.4 需要启动nginx。启动方法：在E:\edu\nginx-1.12.0目录下cmd,输入nginx.exe

19 整合EasyExcel：是阿里巴巴开源的一个excel处理框架，以使用简单、节省内存著称
    19.1：引入依赖
        19.1.1 <dependencies>
                   <dependency>
                       <groupId>com.alibaba</groupId>
                       <artifactId>easyexcel</artifactId>
                       <version>2.1.1</version>
                   </dependency>
               </dependencies>

    19.2 :TestExcelWrite.class 实现写的操作
    19.3 :TestExcelRead.class实现读的操作

20 整合自动创建时间和修改时间
    20.1 通过MyMetaObjectHandle.class实现implements MetaObjectHandler方法、
    20.2 再实体类中创建时间和修改时间上面增加@TableField(fill = FieldFill.INSERT)和@TableField(fill = FieldFill.INSERT_UPDATE)

21 整合逻辑删除
    21.1 在逻辑删除字段上面添加@TableLogic
    21.2 注入bean:ISqlInjector

22 整合阿里云视频点播：需要oss对象存储
    22.1 开通视频点播https://vod.console.aliyun.com/#/overview
    22.2 创建service-vod
    22.3 在service-vod的pom引入依赖
    22.4 初始化InitObject类，编写初始方法
    22.5 根据视频Id获取视频地址和凭证，本地上传到阿里云。TestVod类
    22.6 上传视频 找到VODUploadDemo-java-1.4.11文件 在lib目录里面进行cmd.输入mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-sdk-vod-upload -Dversion=1.4.11 -Dpackaging=jar -Dfile=aliyun-java-vod-upload-1.4.11.jar引入相关依赖
    22.7 配置vod项目的配置文件application
    22.8 在nginx的配置文件反向代理和client_max_body_size 1024m(设置nginx代理的文件代理最大的大小);


23 springCloud实现服务之间的调用.
    23.0 注册中心.服务发现:（Nacos）:
    23.1 相当于现实中的房产中介，Nacos就是实现各个微服务模块注册在Nacos，注册后各个服务就可以实现相互调用。
    23.2 阿里巴巴新的开源框架
    23.2 E:\edu\nacos\bin\双击stratup启动
    23.3 地址：localhost:8848\nacos 用户名：nacos 密码:nacos
    23.4 nacos里面注册
        23.4.1 在service的pom引入依赖
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
                </dependency>
        23.4.2 在application里面配置nacos地址 spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
        23.4.3 在对应的启动类中添加注解：EnableDiscoveryClient 表示nacos注册
    23.5 服务调用:feign设置
        23.5.1 引入依赖
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-openfeign</artifactId>
            </dependency>
        23.5.2 在调用端 写代码（service-edu）在启动类上面加@EnableFeignClients
        23.5.3 创建interface : VodClient 实现代码
        23.5.4 在被调用端的业务逻辑处注入 VodClient
            @Autowired
            private VodClient vodClient;
        23.5.5 vodClient.removeAliyVod(videoId);
    23.6 熔断器 ：hystrix(当被调用的服务器发生宕机，熔断器会熔断该服务，不让后面的服务调用)
        23.6.1 引入依赖
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
            </dependency>
        23.6.2 在调用端的application配置文件中进行配置
            #开启熔断机制
            feign.hystrix.enabled=true
            # 设置hystrix超时时间，默认1000ms
            hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=6000
        23.6.3 在VodClient添加注解@FeignClient(name = "service-vod",fallback = VodClientErrorImpl.class)
        23.6.4 VodClientErrorImpl实现于在VodClient添加注解，表示出错后会执行的方法

24 redis:内存数据库，适用缓存。
    24.1：nosql,key-value形式，支持持久化、通过内存进行存储，多种数据结构：string list hash set,支持事务。
    24.2：把经常进行查询，不经常修改的放到缓存里面。经常把网站的首页数据放到redis缓存里面。
    24.3：创建redis配置类（写道educommon里面），配置插件。
        24.3.1 <!-- redis -->
               <dependency>
                   <groupId>org.springframework.boot</groupId>
                   <artifactId>spring-boot-starter-data-redis</artifactId>
               </dependency>
               <!-- spring2.X集成redis所需common-pool2-->
               <dependency>
                   <groupId>org.apache.commons</groupId>
                   <artifactId>commons-pool2</artifactId>
                   <version>2.6.0</version>
               </dependency>
    24.4 @Cacheable:在CrmBannerServiceImpl的getAllBanner方法加。第一次查询，把数据返回，并把返回的数据放到缓存中，
    根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。
    一般用在查询方法上
    24.5 @CachePut：使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，
    而不需要再去查询数据库。一般用在新增方法上。
    24.6 @CacheEvict：使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上
    24.7 安装redis服务。
        24.7.1 下载redis,修改配置文件redis.windows-service.conf 和 redis.window.conf 注释掉bind 127.0.0.1 ，
        修改protected-mode yes 改为 no(保护模式，改为no就表示非本地也可以访问redis)
        24.7.2 在service-cms的配置文件中添加redis的相关配置
        24.7.3 在对应的services实现类添加对应的缓存注解
        24.7.4 用RedisTemplate<String,String> redisTemplate;存放redis数据

25 登录
    25.1 单一服务模式（只有一台服务器，一个tomcat下部署） 登录成功后，把用户数据放到session域里面。每次判断时候是否是登录，
    就从session去获取数据，如果能获取到数据，就是登录，如果获取不到就不是登录。
    25.2 分布式集群部署（互联网项目，多台服务器），当项目多个模块在不同的服务器应用。登录的方式是单点登录，在一个模块中启动登录过了，就不需要在其他模块登录。
    25.3 单点登录：比如百度，在访问百度的时候，假如在百度贴吧登录过，其他比如百度音乐、百度文库等就不需要登录了。
        25.3.1 使用token,按照一定的规则生成字符串，字符串包含用户信息，在项目的某个模块登录后，按照一定的规则生成包含用户信息的字符串，把字符串返回，
        把字符串通过cookie返回，或者通过地址栏返回。再访问项目其他模块的时候，获取地址栏或者cookie的用户信息。

26 JWT:用作token获取
    26.1 形成包含用户信息的字符串（在token中）的规则组件。
    26.2 jwt的三部分信息，1：jwt头信息。2：有效荷载，包含主体信息（用户信息）。3：签名哈希 防伪标识。
    26.3 在common_utils的pom文件中引入依赖
        26.3.1 <dependencies>
                   <!-- JWT-->
                   <dependency>
                       <groupId>io.jsonwebtoken</groupId>
                       <artifactId>jjwt</artifactId>
                   </dependency>
               </dependencies>
    26.4 创建JwtUtils 的JWT工具类

27 整合阿里云短信
    27.1 在阿里云产品点击短信服务并开通。
    27.2 在短信服务中找到国内消息：在模板管理中添加新的模板（短信通知、），在签名管理中添加新的签名（验证码）。
    27.3 编写MsmController的sendMsm方法传递需要接受验证码的手机号

28 引入微信二维码的依赖
    28.1 <dependencies>
             <dependency>
                 <groupId>com.github.wxpay</groupId>
                 <artifactId>wxpay-sdk</artifactId>
                 <version>0.0.3</version>
             </dependency>
             <dependency>
                 <groupId>com.alibaba</groupId>
                 <artifactId>fastjson</artifactId>
             </dependency>
         </dependencies>
    28.2 生成二维码代码实现：createRWCode

29 定时任务
    29.1 启动类上面添加注解@EnableScheduling 定时任务
    29.2 创建定时任务工具类ScheduledTask

30 canal 数据同步工具:把远程库里面的内容同步到本地库。阿里巴巴开发的，只支持mysql.

31 gateWay 网关：反向代理器
    31.1 与nacos区别：可以同时实现反向代理服务器。但是gateWay不需要大量配置。
    31.2 创建maven子模块infrastructure,的子模块api_gateway，中pom引入依赖
        <dependencies>
            <dependency>
                <groupId>com.lvgr</groupId>
                <artifactId>common_utils</artifactId>
                <version>0.0.1-SNAPSHOT</version>
            </dependency>
            <!--服务注册-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
            </dependency>
            <!--网关核心依赖-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-gateway</artifactId>
            </dependency>

            <!--gson-->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
            </dependency>

            <!--服务调用-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-openfeign</artifactId>
            </dependency>
        </dependencies>
    32.3 创建api_gateway的配置文件application.properties配置相关信息。
    32.4 编写CorsConfig类，让所有请求都没有跨域
    32.5 编写AuthGlobalFilter,过滤所有请求，处理指定的请求。
    32.6 编写ErrorHandlerConfig，异常处理器

33 spring_security 安全框架，用户认证（Authentication）和用户授权（Authorization）
    33.1 （1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。
            系统通过校验用户名和密码来完成认证过程。
         （2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，
            有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。
    33.2 Spring Security其实就是用filter，多请求的路径进行过滤。
    33.3 认证与授权实现思路
         如果系统的模块众多，每个模块都需要就行授权与认证，所以我们选择基于token的形式进行授权与认证，
         1、用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限值，
         2、并以用户名为key，权限列表为value的形式存入redis缓存中，
         3、根据用户名相关信息生成token返回，
         4、浏览器将token记录到cookie中，每次调用api接口都默认将token携带到header请求头中，Spring-security解析header头获取token信息，
         5、解析token获取当前用户名，根据用户名就可以从redis中获取权限列表，这样Spring-security就能够判断当前请求是否有权限访问
    33.4 引入依赖
        <dependencies>
             <dependency>
                 <groupId>com.atguigu</groupId>
                 <artifactId>common_utils</artifactId>
                 <version>0.0.1-SNAPSHOT</version>
             </dependency>
             <!-- Spring Security依赖 -->
             <dependency>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-starter-security</artifactId>
             </dependency>
             <dependency>
                 <groupId>io.jsonwebtoken</groupId>
                 <artifactId>jjwt</artifactId>
             </dependency>
         </dependencies>
    33.5 在应用模块引入spring_security模块
        <dependency>
            <groupId>com.atguigu</groupId>
            <artifactId>spring_security</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    33.6 编写UserDetailsServiceImpl类，并实现secrutiy的org.springframework.security.core.userdetails.UserDetailsService;类
    33.7 实现loadUserByUsername方法
    33.8
        33.8.1 attemptAuthentication方法获取用户登录信息
        33.8.2 loadUserByUsername验证用户信息，获取用户的菜单
        33.8.3 successfulAuthentication认证成功
        33.8.4 doFilterInternal判断操作权限

